/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.31
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */


#ifdef __cplusplus
template<class T> class SwigValueWrapper {
    T *tt;
public:
    SwigValueWrapper() : tt(0) { }
    SwigValueWrapper(const SwigValueWrapper<T>& rhs) : tt(new T(*rhs.tt)) { }
    SwigValueWrapper(const T& t) : tt(new T(t)) { }
    ~SwigValueWrapper() { delete tt; } 
    SwigValueWrapper& operator=(const T& t) { delete tt; tt = new T(t); return *this; }
    operator T&() const { return *tt; }
    T *operator&() { return tt; }
private:
    SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
};
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC)
#   if (__SUNPRO_CC <= 0x560)
#     define SWIGTEMPLATEDISAMBIGUATOR template
#   else
#     define SWIGTEMPLATEDISAMBIGUATOR 
#   endif
# else
#   define SWIGTEMPLATEDISAMBIGUATOR 
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif


/* Fix for jlong on some versions of gcc on Windows */
#if defined(__GNUC__) && !defined(__INTELC__)
  typedef long long __int64;
#endif

/* Fix for jlong on 64-bit x86 Solaris */
#if defined(__x86_64)
# ifdef _LP64
#   undef _LP64
# endif
#endif

#include <jni.h>
#include <stdlib.h>
#include <string.h>


/* Support for throwing Java exceptions */
typedef enum {
  SWIG_JavaOutOfMemoryError = 1, 
  SWIG_JavaIOException, 
  SWIG_JavaRuntimeException, 
  SWIG_JavaIndexOutOfBoundsException,
  SWIG_JavaArithmeticException,
  SWIG_JavaIllegalArgumentException,
  SWIG_JavaNullPointerException,
  SWIG_JavaDirectorPureVirtual,
  SWIG_JavaUnknownError
} SWIG_JavaExceptionCodes;

typedef struct {
  SWIG_JavaExceptionCodes code;
  const char *java_exception;
} SWIG_JavaExceptions_t;


static void SWIGUNUSED SWIG_JavaThrowException(JNIEnv *jenv, SWIG_JavaExceptionCodes code, const char *msg) {
  jclass excep;
  static const SWIG_JavaExceptions_t java_exceptions[] = {
    { SWIG_JavaOutOfMemoryError, "java/lang/OutOfMemoryError" },
    { SWIG_JavaIOException, "java/io/IOException" },
    { SWIG_JavaRuntimeException, "java/lang/RuntimeException" },
    { SWIG_JavaIndexOutOfBoundsException, "java/lang/IndexOutOfBoundsException" },
    { SWIG_JavaArithmeticException, "java/lang/ArithmeticException" },
    { SWIG_JavaIllegalArgumentException, "java/lang/IllegalArgumentException" },
    { SWIG_JavaNullPointerException, "java/lang/NullPointerException" },
    { SWIG_JavaDirectorPureVirtual, "java/lang/RuntimeException" },
    { SWIG_JavaUnknownError,  "java/lang/UnknownError" },
    { (SWIG_JavaExceptionCodes)0,  "java/lang/UnknownError" } };
  const SWIG_JavaExceptions_t *except_ptr = java_exceptions;

  while (except_ptr->code != code && except_ptr->code)
    except_ptr++;

  jenv->ExceptionClear();
  excep = jenv->FindClass(except_ptr->java_exception);
  if (excep)
    jenv->ThrowNew(excep, msg);
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_JavaThrowException(jenv, SWIG_JavaIllegalArgumentException, msg); return nullreturn; } else


#include <stdexcept>


#include <vector>
#include <stdexcept>

SWIGINTERN std::vector<int >::const_reference std_vector_Sl_int_Sg__get(std::vector<int > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_int_Sg__set(std::vector<int > *self,int i,std::vector<int >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<long >::const_reference std_vector_Sl_long_Sg__get(std::vector<long > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_long_Sg__set(std::vector<long > *self,int i,std::vector<long >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<double >::const_reference std_vector_Sl_double_Sg__get(std::vector<double > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_double_Sg__set(std::vector<double > *self,int i,std::vector<double >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN std::vector<clustersStruct_ >::const_reference std_vector_Sl_clustersStruct_Sg__get(std::vector<clustersStruct > *self,int i){
                int size = int(self->size());
                if (i>=0 && i<size)
                    return (*self)[i];
                else
                    throw std::out_of_range("vector index out of range");
            }
SWIGINTERN void std_vector_Sl_clustersStruct_Sg__set(std::vector<clustersStruct > *self,int i,std::vector<clustersStruct_ >::value_type const &x){
                int size = int(self->size());
                if (i>=0 && i<size)
                    (*self)[i] = x;
                else
                    throw std::out_of_range("vector index out of range");
            }

#include "bloom_filter.h"


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1IntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<int > *)new std::vector<int >();
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1IntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<int >::size_type arg1 ;
  std::vector<int > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<int >::size_type)jarg1; 
  result = (std::vector<int > *)new std::vector<int >(arg1);
  *(std::vector<int > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = ((std::vector<int > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (std::vector<int >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  result = (bool)((std::vector<int > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  std::vector<int >::value_type *arg2 = 0 ;
  std::vector<int >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  temp2 = (std::vector<int >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<int >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<int >::const_reference _result_ref = std_vector_Sl_int_Sg__get(arg1,arg2);
      result = (std::vector<int >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_IntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  int arg2 ;
  std::vector<int >::value_type *arg3 = 0 ;
  std::vector<int >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<int > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<int >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_int_Sg__set(arg1,arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1IntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<int > *arg1 = (std::vector<int > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<int > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1LongIntVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<long > *)new std::vector<long >();
  *(std::vector<long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1LongIntVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<long >::size_type arg1 ;
  std::vector<long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<long >::size_type)jarg1; 
  result = (std::vector<long > *)new std::vector<long >(arg1);
  *(std::vector<long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  std::vector<long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  result = ((std::vector<long > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  std::vector<long >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  result = ((std::vector<long > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  std::vector<long >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  arg2 = (std::vector<long >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  result = (bool)((std::vector<long > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  std::vector<long >::value_type *arg2 = 0 ;
  std::vector<long >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  temp2 = (std::vector<long >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<long >::value_type const &)*arg2);
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jint jresult = 0 ;
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  int arg2 ;
  std::vector<long >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<long >::const_reference _result_ref = std_vector_Sl_long_Sg__get(arg1,arg2);
      result = (std::vector<long >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jint)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_LongIntVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jint jarg3) {
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  int arg2 ;
  std::vector<long >::value_type *arg3 = 0 ;
  std::vector<long >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<long > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<long >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_long_Sg__set(arg1,arg2,(long const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1LongIntVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<long > *arg1 = (std::vector<long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<long > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1DoubleVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<double > *)new std::vector<double >();
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1DoubleVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<double >::size_type arg1 ;
  std::vector<double > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<double >::size_type)jarg1; 
  result = (std::vector<double > *)new std::vector<double >(arg1);
  *(std::vector<double > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = ((std::vector<double > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (std::vector<double >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  result = (bool)((std::vector<double > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  std::vector<double >::value_type *arg2 = 0 ;
  std::vector<double >::value_type temp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  temp2 = (std::vector<double >::value_type)jarg2; 
  arg2 = &temp2; 
  (arg1)->push_back((std::vector<double >::value_type const &)*arg2);
}


SWIGEXPORT jdouble JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jdouble jresult = 0 ;
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<double >::const_reference _result_ref = std_vector_Sl_double_Sg__get(arg1,arg2);
      result = (std::vector<double >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  jresult = (jdouble)*result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_DoubleVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jdouble jarg3) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  int arg2 ;
  std::vector<double >::value_type *arg3 = 0 ;
  std::vector<double >::value_type temp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<double > **)&jarg1; 
  arg2 = (int)jarg2; 
  temp3 = (std::vector<double >::value_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_vector_Sl_double_Sg__set(arg1,arg2,(double const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1DoubleVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<double > *arg1 = (std::vector<double > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<double > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_queryImgID(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int arg3 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  result = queryImgID(arg1,arg2,arg3);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_queryImgIDFast(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jlong jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int arg3 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  result = queryImgIDFast(arg1,arg2,arg3);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_queryImgData(JNIEnv *jenv, jclass jcls, jint jarg1, jlong jarg2, jlong jarg3, jlong jarg4, jlong jarg5, jint jarg6, jint jarg7) {
  jlong jresult = 0 ;
  int arg1 ;
  int *arg2 = (int *) 0 ;
  int *arg3 = (int *) 0 ;
  int *arg4 = (int *) 0 ;
  double *arg5 = (double *) 0 ;
  int arg6 ;
  int arg7 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = *(int **)&jarg2; 
  arg3 = *(int **)&jarg3; 
  arg4 = *(int **)&jarg4; 
  arg5 = *(double **)&jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  result = queryImgData(arg1,arg2,arg3,arg4,arg5,arg6,arg7);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_addImage(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jstring jarg3) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  char *arg3 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = 0;
  if (jarg3) {
    arg3 = (char *)jenv->GetStringUTFChars(jarg3, 0);
    if (!arg3) return 0;
  }
  result = (int)addImage(arg1,arg2,arg3);
  jresult = (jint)result; 
  if (arg3) jenv->ReleaseStringUTFChars(jarg3, (const char *)arg3);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_savedb(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)savedb(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_loaddb(JNIEnv *jenv, jclass jcls, jint jarg1, jstring jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = 0;
  if (jarg2) {
    arg2 = (char *)jenv->GetStringUTFChars(jarg2, 0);
    if (!arg2) return 0;
  }
  result = (int)loaddb(arg1,arg2);
  jresult = (jint)result; 
  if (arg2) jenv->ReleaseStringUTFChars(jarg2, (const char *)arg2);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_savealldbs(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)savealldbs(arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_loadalldbs(JNIEnv *jenv, jclass jcls, jstring jarg1) {
  jint jresult = 0 ;
  char *arg1 = (char *) 0 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = 0;
  if (jarg1) {
    arg1 = (char *)jenv->GetStringUTFChars(jarg1, 0);
    if (!arg1) return 0;
  }
  result = (int)loadalldbs(arg1);
  jresult = (jint)result; 
  if (arg1) jenv->ReleaseStringUTFChars(jarg1, (const char *)arg1);
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_removeID(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  result = (int)removeID(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_resetdb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)resetdb(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_initDbase(JNIEnv *jenv, jclass jcls, jint jarg1) {
  int arg1 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  initDbase(arg1);
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_closeDbase(JNIEnv *jenv, jclass jcls) {
  (void)jenv;
  (void)jcls;
  closeDbase();
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getImgCount(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  long result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (long)getImgCount(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_isImageOnDB(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)isImageOnDB(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getImageHeight(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  result = (int)getImageHeight(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getImageWidth(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  result = (int)getImageWidth(arg1,arg2);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_calcAvglDiff(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  int arg1 ;
  long arg2 ;
  long arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (double)calcAvglDiff(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_calcDiff(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jdouble jresult = 0 ;
  int arg1 ;
  long arg2 ;
  long arg3 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (long)jarg3; 
  result = (double)calcDiff(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getImageAvgl(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  long arg2 ;
  std::vector<double > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  result = getImageAvgl(arg1,arg2);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_addImageBlob(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jint jarg4) {
  jint jresult = 0 ;
  int arg1 ;
  long arg2 ;
  void *arg3 = (void *) 0 ;
  long arg4 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = *(void **)&jarg3; 
  arg4 = (long)jarg4; 
  result = (int)addImageBlob(arg1,arg2,(void const *)arg3,arg4);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getDBList(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<int > result;
  
  (void)jenv;
  (void)jcls;
  result = getDBList();
  *(std::vector<int > **)&jresult = new std::vector<int >((std::vector<int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getImgIdList(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  std::vector<long > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = getImgIdList(arg1);
  *(std::vector<long > **)&jresult = new std::vector<long >((std::vector<long > &)result); 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_isValidDB(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)isValidDB(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jint JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_destroydb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jint jresult = 0 ;
  int arg1 ;
  int result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (int)destroydb(arg1);
  jresult = (jint)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_deactivateTrial(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)deactivateTrial(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_removedb(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jboolean jresult = 0 ;
  int arg1 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bool)removedb(arg1);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_addKeywordImg(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)addKeywordImg(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_addKeywordsImg(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<int > arg3 ;
  bool result;
  std::vector<int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::vector<int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)addKeywordsImg(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_removeKeywordImg(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)removeKeywordImg(arg1,arg2,arg3);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_removeAllKeywordImg(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jboolean jresult = 0 ;
  int arg1 ;
  int arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)removeAllKeywordImg(arg1,arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getKeywordsImg(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<int > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = getKeywordsImg(arg1,arg2);
  *(std::vector<int > **)&jresult = new std::vector<int >((std::vector<int > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_queryImgIDKeywords(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector<int > arg5 ;
  std::vector<double > result;
  std::vector<int > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(std::vector<int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg5 = *argp5; 
  result = queryImgIDKeywords(arg1,arg2,arg3,arg4,arg5);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_queryImgIDFastKeywords(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jint jarg4, jlong jarg5, jobject jarg5_) {
  jlong jresult = 0 ;
  int arg1 ;
  long arg2 ;
  int arg3 ;
  int arg4 ;
  std::vector<int > arg5 ;
  std::vector<double > result;
  std::vector<int > *argp5 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg5_;
  arg1 = (int)jarg1; 
  arg2 = (long)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = *(std::vector<int > **)&jarg5; 
  if (!argp5) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg5 = *argp5; 
  result = queryImgIDFastKeywords(arg1,arg2,arg3,arg4,arg5);
  *(std::vector<double > **)&jresult = new std::vector<double >((std::vector<double > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getAllImgsByKeywords(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jint jarg3, jlong jarg4, jobject jarg4_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  std::vector<int > arg4 ;
  std::vector<long > result;
  std::vector<int > *argp4 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg4_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = *(std::vector<int > **)&jarg4; 
  if (!argp4) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg4 = *argp4; 
  result = getAllImgsByKeywords(arg1,arg2,arg3,arg4);
  *(std::vector<long > **)&jresult = new std::vector<long >((std::vector<long > &)result); 
  return jresult;
}


SWIGEXPORT jdouble JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getKeywordsVisualDistance(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jdouble jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<int > arg3 ;
  double result;
  std::vector<int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::vector<int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg3 = *argp3; 
  result = (double)getKeywordsVisualDistance(arg1,arg2,arg3);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getKeywordsPopular(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<int > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = getKeywordsPopular(arg1,arg2);
  *(std::vector<int > **)&jresult = new std::vector<int >((std::vector<int > &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1id_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  imageId arg2 ;
  imageId *argp2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clustersStruct **)&jarg1; 
  argp2 = *(imageId **)&jarg2; 
  if (!argp2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null imageId");
    return ;
  }
  arg2 = *argp2; 
  if (arg1) (arg1)->id = arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1id_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  imageId result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clustersStruct **)&jarg1; 
  result =  ((arg1)->id);
  *(imageId **)&jresult = new imageId((imageId &)result); 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1imgIds_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  std::vector<long > *arg2 = (std::vector<long > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(clustersStruct **)&jarg1; 
  arg2 = *(std::vector<long > **)&jarg2; 
  if (arg1) (arg1)->imgIds = *arg2;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1imgIds_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  std::vector<long > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clustersStruct **)&jarg1; 
  result = (std::vector<long > *)& ((arg1)->imgIds);
  *(std::vector<long > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1diameter_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jdouble jarg2) {
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  double arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clustersStruct **)&jarg1; 
  arg2 = (double)jarg2; 
  if (arg1) (arg1)->diameter = arg2;
  
}


SWIGEXPORT jdouble JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_clustersStruct_1diameter_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jdouble jresult = 0 ;
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  double result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(clustersStruct **)&jarg1; 
  result = (double) ((arg1)->diameter);
  jresult = (jdouble)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1clustersStruct(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  clustersStruct *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (clustersStruct *)new clustersStruct();
  *(clustersStruct **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1clustersStruct(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  clustersStruct *arg1 = (clustersStruct *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(clustersStruct **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1ClusterVector_1_1SWIG_10(JNIEnv *jenv, jclass jcls) {
  jlong jresult = 0 ;
  std::vector<clustersStruct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  result = (std::vector<clustersStruct > *)new std::vector<clustersStruct >();
  *(std::vector<clustersStruct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1ClusterVector_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  jlong jresult = 0 ;
  std::vector<clustersStruct_ >::size_type arg1 ;
  std::vector<clustersStruct > *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::vector<clustersStruct_ >::size_type)jarg1; 
  result = (std::vector<clustersStruct > *)new std::vector<clustersStruct >(arg1);
  *(std::vector<clustersStruct > **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  std::vector<clustersStruct_ >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  result = ((std::vector<clustersStruct > const *)arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1capacity(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  std::vector<clustersStruct_ >::size_type result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  result = ((std::vector<clustersStruct > const *)arg1)->capacity();
  jresult = (jlong)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1reserve(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2) {
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  std::vector<clustersStruct_ >::size_type arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  arg2 = (std::vector<clustersStruct_ >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1isEmpty(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jboolean jresult = 0 ;
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  result = (bool)((std::vector<clustersStruct > const *)arg1)->empty();
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1clear(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1add(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jlong jarg2, jobject jarg2_) {
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  std::vector<clustersStruct_ >::value_type *arg2 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg2_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  arg2 = *(std::vector<clustersStruct_ >::value_type **)&jarg2;
  if(!arg2) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<clustersStruct_ >::value_type const & reference is null");
    return ;
  } 
  (arg1)->push_back((std::vector<clustersStruct_ >::value_type const &)*arg2);
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1get(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jlong jresult = 0 ;
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  int arg2 ;
  std::vector<clustersStruct_ >::value_type *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  arg2 = (int)jarg2; 
  try {
    {
      std::vector<clustersStruct_ >::const_reference _result_ref = std_vector_Sl_clustersStruct_Sg__get(arg1,arg2);
      result = (std::vector<clustersStruct_ >::value_type *) &_result_ref;
    }
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return 0;
  }
  
  *(std::vector<clustersStruct_ >::value_type **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_ClusterVector_1set(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2, jlong jarg3, jobject jarg3_) {
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  int arg2 ;
  std::vector<clustersStruct_ >::value_type *arg3 = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  (void)jarg3_;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  arg2 = (int)jarg2; 
  arg3 = *(std::vector<clustersStruct_ >::value_type **)&jarg3;
  if(!arg3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "std::vector<clustersStruct_ >::value_type const & reference is null");
    return ;
  } 
  try {
    std_vector_Sl_clustersStruct_Sg__set(arg1,arg2,(clustersStruct_ const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_JavaThrowException(jenv, SWIG_JavaIndexOutOfBoundsException, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1ClusterVector(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  std::vector<clustersStruct > *arg1 = (std::vector<clustersStruct > *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(std::vector<clustersStruct > **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getClusterDb(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<clustersStruct > result;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = getClusterDb(arg1,arg2);
  *(std::vector<clustersStruct > **)&jresult = new std::vector<clustersStruct >((std::vector<clustersStruct > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getClusterKeywords(JNIEnv *jenv, jclass jcls, jint jarg1, jint jarg2, jlong jarg3, jobject jarg3_) {
  jlong jresult = 0 ;
  int arg1 ;
  int arg2 ;
  std::vector<int > arg3 ;
  std::vector<clustersStruct > result;
  std::vector<int > *argp3 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg3_;
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  argp3 = *(std::vector<int > **)&jarg3; 
  if (!argp3) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "Attempt to dereference null std::vector<int >");
    return 0;
  }
  arg3 = *argp3; 
  result = getClusterKeywords(arg1,arg2,arg3);
  *(std::vector<clustersStruct > **)&jresult = new std::vector<clustersStruct >((std::vector<clustersStruct > &)result); 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_getIdsBloomFilter(JNIEnv *jenv, jclass jcls, jint jarg1) {
  jlong jresult = 0 ;
  int arg1 ;
  bloom_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (int)jarg1; 
  result = (bloom_filter *)getIdsBloomFilter(arg1);
  *(bloom_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1bloom_1filter_1_1SWIG_10(JNIEnv *jenv, jclass jcls, jlong jarg1, jdouble jarg2, jlong jarg3) {
  jlong jresult = 0 ;
  std::size_t arg1 ;
  double arg2 ;
  std::size_t arg3 ;
  bloom_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = (std::size_t)jarg1; 
  arg2 = (double)jarg2; 
  arg3 = (std::size_t)jarg3; 
  result = (bloom_filter *)new bloom_filter(arg1,arg2,arg3);
  *(bloom_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_new_1bloom_1filter_1_1SWIG_11(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bloom_filter *arg1 = 0 ;
  bloom_filter *result = 0 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bloom_filter **)&jarg1;
  if(!arg1) {
    SWIG_JavaThrowException(jenv, SWIG_JavaNullPointerException, "bloom_filter const & reference is null");
    return 0;
  } 
  result = (bloom_filter *)new bloom_filter((bloom_filter const &)*arg1);
  *(bloom_filter **)&jresult = result; 
  return jresult;
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_delete_1bloom_1filter(JNIEnv *jenv, jclass jcls, jlong jarg1) {
  bloom_filter *arg1 = (bloom_filter *) 0 ;
  
  (void)jenv;
  (void)jcls;
  arg1 = *(bloom_filter **)&jarg1; 
  delete arg1;
  
}


SWIGEXPORT void JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_bloom_1filter_1insert(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  bloom_filter *arg1 = (bloom_filter *) 0 ;
  long arg2 ;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bloom_filter **)&jarg1; 
  arg2 = (long)jarg2; 
  (arg1)->insert(arg2);
}


SWIGEXPORT jboolean JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_bloom_1filter_1contains(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_, jint jarg2) {
  jboolean jresult = 0 ;
  bloom_filter *arg1 = (bloom_filter *) 0 ;
  long arg2 ;
  bool result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bloom_filter **)&jarg1; 
  arg2 = (long)jarg2; 
  result = (bool)(arg1)->contains(arg2);
  jresult = (jboolean)result; 
  return jresult;
}


SWIGEXPORT jlong JNICALL Java_net_imgseek_imgdb_core_imgdbJNI_bloom_1filter_1size(JNIEnv *jenv, jclass jcls, jlong jarg1, jobject jarg1_) {
  jlong jresult = 0 ;
  bloom_filter *arg1 = (bloom_filter *) 0 ;
  std::size_t result;
  
  (void)jenv;
  (void)jcls;
  (void)jarg1_;
  arg1 = *(bloom_filter **)&jarg1; 
  result = (arg1)->size();
  jresult = (jlong)result; 
  return jresult;
}


#ifdef __cplusplus
}
#endif

