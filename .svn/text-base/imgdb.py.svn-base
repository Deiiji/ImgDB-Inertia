# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.35
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _imgdb
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _imgdb.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _imgdb.PySwigIterator_value(*args)
    def incr(*args): return _imgdb.PySwigIterator_incr(*args)
    def decr(*args): return _imgdb.PySwigIterator_decr(*args)
    def distance(*args): return _imgdb.PySwigIterator_distance(*args)
    def equal(*args): return _imgdb.PySwigIterator_equal(*args)
    def copy(*args): return _imgdb.PySwigIterator_copy(*args)
    def next(*args): return _imgdb.PySwigIterator_next(*args)
    def previous(*args): return _imgdb.PySwigIterator_previous(*args)
    def advance(*args): return _imgdb.PySwigIterator_advance(*args)
    def __eq__(*args): return _imgdb.PySwigIterator___eq__(*args)
    def __ne__(*args): return _imgdb.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _imgdb.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _imgdb.PySwigIterator___isub__(*args)
    def __add__(*args): return _imgdb.PySwigIterator___add__(*args)
    def __sub__(*args): return _imgdb.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _imgdb.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class IntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, IntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, IntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _imgdb.IntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _imgdb.IntVector___nonzero__(*args)
    def __len__(*args): return _imgdb.IntVector___len__(*args)
    def pop(*args): return _imgdb.IntVector_pop(*args)
    def __getslice__(*args): return _imgdb.IntVector___getslice__(*args)
    def __setslice__(*args): return _imgdb.IntVector___setslice__(*args)
    def __delslice__(*args): return _imgdb.IntVector___delslice__(*args)
    def __delitem__(*args): return _imgdb.IntVector___delitem__(*args)
    def __getitem__(*args): return _imgdb.IntVector___getitem__(*args)
    def __setitem__(*args): return _imgdb.IntVector___setitem__(*args)
    def append(*args): return _imgdb.IntVector_append(*args)
    def empty(*args): return _imgdb.IntVector_empty(*args)
    def size(*args): return _imgdb.IntVector_size(*args)
    def clear(*args): return _imgdb.IntVector_clear(*args)
    def swap(*args): return _imgdb.IntVector_swap(*args)
    def get_allocator(*args): return _imgdb.IntVector_get_allocator(*args)
    def begin(*args): return _imgdb.IntVector_begin(*args)
    def end(*args): return _imgdb.IntVector_end(*args)
    def rbegin(*args): return _imgdb.IntVector_rbegin(*args)
    def rend(*args): return _imgdb.IntVector_rend(*args)
    def pop_back(*args): return _imgdb.IntVector_pop_back(*args)
    def erase(*args): return _imgdb.IntVector_erase(*args)
    def __init__(self, *args): 
        this = _imgdb.new_IntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _imgdb.IntVector_push_back(*args)
    def front(*args): return _imgdb.IntVector_front(*args)
    def back(*args): return _imgdb.IntVector_back(*args)
    def assign(*args): return _imgdb.IntVector_assign(*args)
    def resize(*args): return _imgdb.IntVector_resize(*args)
    def insert(*args): return _imgdb.IntVector_insert(*args)
    def reserve(*args): return _imgdb.IntVector_reserve(*args)
    def capacity(*args): return _imgdb.IntVector_capacity(*args)
    __swig_destroy__ = _imgdb.delete_IntVector
    __del__ = lambda self : None;
IntVector_swigregister = _imgdb.IntVector_swigregister
IntVector_swigregister(IntVector)

class LongIntVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, LongIntVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, LongIntVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _imgdb.LongIntVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _imgdb.LongIntVector___nonzero__(*args)
    def __len__(*args): return _imgdb.LongIntVector___len__(*args)
    def pop(*args): return _imgdb.LongIntVector_pop(*args)
    def __getslice__(*args): return _imgdb.LongIntVector___getslice__(*args)
    def __setslice__(*args): return _imgdb.LongIntVector___setslice__(*args)
    def __delslice__(*args): return _imgdb.LongIntVector___delslice__(*args)
    def __delitem__(*args): return _imgdb.LongIntVector___delitem__(*args)
    def __getitem__(*args): return _imgdb.LongIntVector___getitem__(*args)
    def __setitem__(*args): return _imgdb.LongIntVector___setitem__(*args)
    def append(*args): return _imgdb.LongIntVector_append(*args)
    def empty(*args): return _imgdb.LongIntVector_empty(*args)
    def size(*args): return _imgdb.LongIntVector_size(*args)
    def clear(*args): return _imgdb.LongIntVector_clear(*args)
    def swap(*args): return _imgdb.LongIntVector_swap(*args)
    def get_allocator(*args): return _imgdb.LongIntVector_get_allocator(*args)
    def begin(*args): return _imgdb.LongIntVector_begin(*args)
    def end(*args): return _imgdb.LongIntVector_end(*args)
    def rbegin(*args): return _imgdb.LongIntVector_rbegin(*args)
    def rend(*args): return _imgdb.LongIntVector_rend(*args)
    def pop_back(*args): return _imgdb.LongIntVector_pop_back(*args)
    def erase(*args): return _imgdb.LongIntVector_erase(*args)
    def __init__(self, *args): 
        this = _imgdb.new_LongIntVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _imgdb.LongIntVector_push_back(*args)
    def front(*args): return _imgdb.LongIntVector_front(*args)
    def back(*args): return _imgdb.LongIntVector_back(*args)
    def assign(*args): return _imgdb.LongIntVector_assign(*args)
    def resize(*args): return _imgdb.LongIntVector_resize(*args)
    def insert(*args): return _imgdb.LongIntVector_insert(*args)
    def reserve(*args): return _imgdb.LongIntVector_reserve(*args)
    def capacity(*args): return _imgdb.LongIntVector_capacity(*args)
    __swig_destroy__ = _imgdb.delete_LongIntVector
    __del__ = lambda self : None;
LongIntVector_swigregister = _imgdb.LongIntVector_swigregister
LongIntVector_swigregister(LongIntVector)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _imgdb.DoubleVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _imgdb.DoubleVector___nonzero__(*args)
    def __len__(*args): return _imgdb.DoubleVector___len__(*args)
    def pop(*args): return _imgdb.DoubleVector_pop(*args)
    def __getslice__(*args): return _imgdb.DoubleVector___getslice__(*args)
    def __setslice__(*args): return _imgdb.DoubleVector___setslice__(*args)
    def __delslice__(*args): return _imgdb.DoubleVector___delslice__(*args)
    def __delitem__(*args): return _imgdb.DoubleVector___delitem__(*args)
    def __getitem__(*args): return _imgdb.DoubleVector___getitem__(*args)
    def __setitem__(*args): return _imgdb.DoubleVector___setitem__(*args)
    def append(*args): return _imgdb.DoubleVector_append(*args)
    def empty(*args): return _imgdb.DoubleVector_empty(*args)
    def size(*args): return _imgdb.DoubleVector_size(*args)
    def clear(*args): return _imgdb.DoubleVector_clear(*args)
    def swap(*args): return _imgdb.DoubleVector_swap(*args)
    def get_allocator(*args): return _imgdb.DoubleVector_get_allocator(*args)
    def begin(*args): return _imgdb.DoubleVector_begin(*args)
    def end(*args): return _imgdb.DoubleVector_end(*args)
    def rbegin(*args): return _imgdb.DoubleVector_rbegin(*args)
    def rend(*args): return _imgdb.DoubleVector_rend(*args)
    def pop_back(*args): return _imgdb.DoubleVector_pop_back(*args)
    def erase(*args): return _imgdb.DoubleVector_erase(*args)
    def __init__(self, *args): 
        this = _imgdb.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _imgdb.DoubleVector_push_back(*args)
    def front(*args): return _imgdb.DoubleVector_front(*args)
    def back(*args): return _imgdb.DoubleVector_back(*args)
    def assign(*args): return _imgdb.DoubleVector_assign(*args)
    def resize(*args): return _imgdb.DoubleVector_resize(*args)
    def insert(*args): return _imgdb.DoubleVector_insert(*args)
    def reserve(*args): return _imgdb.DoubleVector_reserve(*args)
    def capacity(*args): return _imgdb.DoubleVector_capacity(*args)
    __swig_destroy__ = _imgdb.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _imgdb.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

queryImgID = _imgdb.queryImgID
queryImgIDFast = _imgdb.queryImgIDFast
queryImgData = _imgdb.queryImgData
addImage = _imgdb.addImage
savedb = _imgdb.savedb
loaddb = _imgdb.loaddb
savealldbs = _imgdb.savealldbs
loadalldbs = _imgdb.loadalldbs
removeID = _imgdb.removeID
resetdb = _imgdb.resetdb
initDbase = _imgdb.initDbase
closeDbase = _imgdb.closeDbase
getImgCount = _imgdb.getImgCount
isImageOnDB = _imgdb.isImageOnDB
getImageHeight = _imgdb.getImageHeight
getImageWidth = _imgdb.getImageWidth
calcAvglDiff = _imgdb.calcAvglDiff
calcDiff = _imgdb.calcDiff
getImageAvgl = _imgdb.getImageAvgl
addImageBlob = _imgdb.addImageBlob
getDBList = _imgdb.getDBList
getImgIdList = _imgdb.getImgIdList
isValidDB = _imgdb.isValidDB
destroydb = _imgdb.destroydb
removedb = _imgdb.removedb
addKeywordImg = _imgdb.addKeywordImg
addKeywordsImg = _imgdb.addKeywordsImg
removeKeywordImg = _imgdb.removeKeywordImg
removeAllKeywordImg = _imgdb.removeAllKeywordImg
getKeywordsImg = _imgdb.getKeywordsImg
queryImgIDKeywords = _imgdb.queryImgIDKeywords
queryImgIDFastKeywords = _imgdb.queryImgIDFastKeywords
getAllImgsByKeywords = _imgdb.getAllImgsByKeywords
getKeywordsVisualDistance = _imgdb.getKeywordsVisualDistance
getKeywordsPopular = _imgdb.getKeywordsPopular
class clustersStruct(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, clustersStruct, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, clustersStruct, name)
    __repr__ = _swig_repr
    __swig_setmethods__["id"] = _imgdb.clustersStruct_id_set
    __swig_getmethods__["id"] = _imgdb.clustersStruct_id_get
    if _newclass:id = _swig_property(_imgdb.clustersStruct_id_get, _imgdb.clustersStruct_id_set)
    __swig_setmethods__["imgIds"] = _imgdb.clustersStruct_imgIds_set
    __swig_getmethods__["imgIds"] = _imgdb.clustersStruct_imgIds_get
    if _newclass:imgIds = _swig_property(_imgdb.clustersStruct_imgIds_get, _imgdb.clustersStruct_imgIds_set)
    __swig_setmethods__["diameter"] = _imgdb.clustersStruct_diameter_set
    __swig_getmethods__["diameter"] = _imgdb.clustersStruct_diameter_get
    if _newclass:diameter = _swig_property(_imgdb.clustersStruct_diameter_get, _imgdb.clustersStruct_diameter_set)
    def __init__(self, *args): 
        this = _imgdb.new_clustersStruct(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imgdb.delete_clustersStruct
    __del__ = lambda self : None;
clustersStruct_swigregister = _imgdb.clustersStruct_swigregister
clustersStruct_swigregister(clustersStruct)

class ClusterVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ClusterVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ClusterVector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _imgdb.ClusterVector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _imgdb.ClusterVector___nonzero__(*args)
    def __len__(*args): return _imgdb.ClusterVector___len__(*args)
    def pop(*args): return _imgdb.ClusterVector_pop(*args)
    def __getslice__(*args): return _imgdb.ClusterVector___getslice__(*args)
    def __setslice__(*args): return _imgdb.ClusterVector___setslice__(*args)
    def __delslice__(*args): return _imgdb.ClusterVector___delslice__(*args)
    def __delitem__(*args): return _imgdb.ClusterVector___delitem__(*args)
    def __getitem__(*args): return _imgdb.ClusterVector___getitem__(*args)
    def __setitem__(*args): return _imgdb.ClusterVector___setitem__(*args)
    def append(*args): return _imgdb.ClusterVector_append(*args)
    def empty(*args): return _imgdb.ClusterVector_empty(*args)
    def size(*args): return _imgdb.ClusterVector_size(*args)
    def clear(*args): return _imgdb.ClusterVector_clear(*args)
    def swap(*args): return _imgdb.ClusterVector_swap(*args)
    def get_allocator(*args): return _imgdb.ClusterVector_get_allocator(*args)
    def begin(*args): return _imgdb.ClusterVector_begin(*args)
    def end(*args): return _imgdb.ClusterVector_end(*args)
    def rbegin(*args): return _imgdb.ClusterVector_rbegin(*args)
    def rend(*args): return _imgdb.ClusterVector_rend(*args)
    def pop_back(*args): return _imgdb.ClusterVector_pop_back(*args)
    def erase(*args): return _imgdb.ClusterVector_erase(*args)
    def __init__(self, *args): 
        this = _imgdb.new_ClusterVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _imgdb.ClusterVector_push_back(*args)
    def front(*args): return _imgdb.ClusterVector_front(*args)
    def back(*args): return _imgdb.ClusterVector_back(*args)
    def assign(*args): return _imgdb.ClusterVector_assign(*args)
    def resize(*args): return _imgdb.ClusterVector_resize(*args)
    def insert(*args): return _imgdb.ClusterVector_insert(*args)
    def reserve(*args): return _imgdb.ClusterVector_reserve(*args)
    def capacity(*args): return _imgdb.ClusterVector_capacity(*args)
    __swig_destroy__ = _imgdb.delete_ClusterVector
    __del__ = lambda self : None;
ClusterVector_swigregister = _imgdb.ClusterVector_swigregister
ClusterVector_swigregister(ClusterVector)

getClusterDb = _imgdb.getClusterDb
getClusterKeywords = _imgdb.getClusterKeywords
getIdsBloomFilter = _imgdb.getIdsBloomFilter
class bloom_filter(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, bloom_filter, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, bloom_filter, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _imgdb.new_bloom_filter(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imgdb.delete_bloom_filter
    __del__ = lambda self : None;
    def insert(*args): return _imgdb.bloom_filter_insert(*args)
    def contains(*args): return _imgdb.bloom_filter_contains(*args)
    def size(*args): return _imgdb.bloom_filter_size(*args)
    def __iand__(*args): return _imgdb.bloom_filter___iand__(*args)
    def __ior__(*args): return _imgdb.bloom_filter___ior__(*args)
    def __ixor__(*args): return _imgdb.bloom_filter___ixor__(*args)
bloom_filter_swigregister = _imgdb.bloom_filter_swigregister
bloom_filter_swigregister(bloom_filter)



